Signed-off-by: Mélanie Bats <melanie.bats@obeo.fr>
---
 .../pkgconfig/properties/DataModelProvider.java    |    8 ++++----
 .../settings/PkgConfigExternalSettingProvider.java |   17 +++++++++--------
 .../cdt/managedbuilder/pkgconfig/util/Parser.java  |   13 +++++++------
 .../pkgconfig/util/PkgConfigUtil.java              |    5 +++--
 4 files changed, 23 insertions(+), 20 deletions(-)

diff --git a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/properties/DataModelProvider.java b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/properties/DataModelProvider.java
index b36ee7f..0ffe7bf 100644
--- a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/properties/DataModelProvider.java
+++ b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/properties/DataModelProvider.java
@@ -30,9 +30,9 @@ public enum DataModelProvider {
 	private DataModelProvider() {
 		this.dms = new ArrayList<DataModel>();
 
-		ArrayList<String> packages = PkgConfigUtil.getAllPackages();
-		ArrayList<String> pkgList = Parser.parsePackageList(packages);
-		ArrayList<String> nonSortedPkgList = Parser.parsePackageList(packages);
+		List<String> packages = PkgConfigUtil.getAllPackages();
+		List<String> pkgList = Parser.parsePackageList(packages);
+		List<String> nonSortedPkgList = Parser.parsePackageList(packages);
 		HashMap<Integer, Integer> origSortedIdx = new HashMap<Integer, Integer>();
 		Collections.sort(pkgList, String.CASE_INSENSITIVE_ORDER);
 		int sortedIdx;
@@ -43,7 +43,7 @@ public enum DataModelProvider {
 		}
 		
 		//get descriptions and sort according to package names
-		ArrayList<String> descs = Parser.parseDescription(packages);
+		List<String> descs = Parser.parseDescription(packages);
 		int cellPlace;
 		String[] sortedArray = new String[descs.size()];
 		for (int i=0; i<descs.size(); i++) {
diff --git a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/settings/PkgConfigExternalSettingProvider.java b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/settings/PkgConfigExternalSettingProvider.java
index 37975c5..6f1f5fa 100644
--- a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/settings/PkgConfigExternalSettingProvider.java
+++ b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/settings/PkgConfigExternalSettingProvider.java
@@ -12,6 +12,7 @@ package org.eclipse.cdt.managedbuilder.pkgconfig.settings;
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.List;
 
 import org.eclipse.cdt.core.model.CoreModel;
 import org.eclipse.cdt.core.settings.model.CExternalSetting;
@@ -157,7 +158,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	private static ICLanguageSettingEntry[] formIncludePathEntries(String[] includes) {
-		ArrayList<ICLanguageSettingEntry> incPathEntries = new ArrayList<ICLanguageSettingEntry>();
+		List<ICLanguageSettingEntry> incPathEntries = new ArrayList<ICLanguageSettingEntry>();
 		for(String inc : includes) {
 			ICIncludePathEntry incPathEntry = new CIncludePathEntry(new Path(inc),
 					ICSettingEntry.INCLUDE_PATH);
@@ -172,7 +173,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	private static ICLanguageSettingEntry[] formLibraryFileEntries(String[] libs) {
-		ArrayList<ICLanguageSettingEntry> libEntries = new ArrayList<ICLanguageSettingEntry>();
+		List<ICLanguageSettingEntry> libEntries = new ArrayList<ICLanguageSettingEntry>();
 		for(String lib : libs) {
 			CLibraryFileEntry libFileEntry = new CLibraryFileEntry(lib,
 					ICSettingEntry.LIBRARY_FILE);
@@ -187,7 +188,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	private static ICLanguageSettingEntry[] formLibraryPathEntries(String[] libPaths) {
-		ArrayList<ICLanguageSettingEntry> libPathEntries = new ArrayList<ICLanguageSettingEntry>();
+		List<ICLanguageSettingEntry> libPathEntries = new ArrayList<ICLanguageSettingEntry>();
 		for(String libPath : libPaths) {
 			CLibraryPathEntry libPathEntry = new CLibraryPathEntry(new Path(libPath),
 					ICSettingEntry.LIBRARY_PATH);
@@ -202,7 +203,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	private static String[] getIncludePathsFromCheckedPackages(IProject proj) {
-		ArrayList<String> includeList = new ArrayList<String>();
+		List<String> includeList = new ArrayList<String>();
 		String[] pkgs = getCheckedPackageNames(proj);
 		String cflags = null;
 		String[] includeArray = null;
@@ -222,7 +223,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	private static String[] getLibraryFilesFromCheckedPackages(IProject proj) {
-		ArrayList<String> libList = new ArrayList<String>();
+		List<String> libList = new ArrayList<String>();
 		String[] pkgs = getCheckedPackageNames(proj);
 		String libs = null;
 		String[] libArray = null;
@@ -242,7 +243,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	private static String[] getLibraryPathsFromCheckedPackages(IProject proj) {
-		ArrayList<String> libPathList = new ArrayList<String>();
+		List<String> libPathList = new ArrayList<String>();
 		String[] pkgs = getCheckedPackageNames(proj);
 		String libPaths = null;
 		String[] libPathArray = null;
@@ -262,7 +263,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	 * @return
 	 */
 	static String[] getOtherFlagsFromCheckedPackages(IProject proj) {
-		ArrayList<String> otherFlagList = new ArrayList<String>();
+		List<String> otherFlagList = new ArrayList<String>();
 		String[] pkgs = getCheckedPackageNames(proj);
 		String cflags = null;
 		String[] otherFlagArray = null;
@@ -326,7 +327,7 @@ public class PkgConfigExternalSettingProvider extends CExternalSettingProvider {
 	private static String[] getCheckedPackageNames(IProject proj) {
 		ICStorageElement pkgStorage = getPackageStorage(proj);
 		String[] pkgNames = pkgStorage.getAttributeNames();
-		ArrayList<String> pkgs = new ArrayList<String>();
+		List<String> pkgs = new ArrayList<String>();
 		String value = null;
 		for(String pkgName : pkgNames) {
 			value = pkgStorage.getAttribute(pkgName);
diff --git a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/Parser.java b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/Parser.java
index 72b2e40..316a88f 100644
--- a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/Parser.java
+++ b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/Parser.java
@@ -11,6 +11,7 @@
 package org.eclipse.cdt.managedbuilder.pkgconfig.util;
 
 import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Parses pkg-config utility output.
@@ -172,13 +173,13 @@ public class Parser {
 	}
 	
 	/**
-	 * Parse package list so that only package names are added to ArrayList.
+	 * Parse package list so that only package names are added to List.
 	 * 
 	 * @param packages
 	 * @return
 	 */
-	public static ArrayList<String> parsePackageList(ArrayList<String> packages) {
-		ArrayList<String> operated = new ArrayList<String>();
+	public static List<String> parsePackageList(List<String> packages) {
+		List<String> operated = new ArrayList<String>();
 		for (String s : packages) {
 			//cut the string after the first white space
 			int end = s.indexOf(" "); //$NON-NLS-1$
@@ -188,13 +189,13 @@ public class Parser {
 	}
 	
 	/**
-	 * Parse package list that only package descriptions are added to ArrayList.
+	 * Parse package list that only package descriptions are added to List.
 	 * 
 	 * @param packages
 	 * @return
 	 */
-	public static ArrayList<String> parseDescription(ArrayList<String> packages) {
-		ArrayList<String> operated = new ArrayList<String>();
+	public static List<String> parseDescription(List<String> packages) {
+		List<String> operated = new ArrayList<String>();
 		int ws, start = 0;
 		for (String s : packages) {
 			ws = s.indexOf(" "); //$NON-NLS-1$
diff --git a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/PkgConfigUtil.java b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/PkgConfigUtil.java
index 3b3e71e..3517733 100644
--- a/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/PkgConfigUtil.java
+++ b/org.eclipse.cdt.managedbuilder.pkgconfig/src/org/eclipse/cdt/managedbuilder/pkgconfig/util/PkgConfigUtil.java
@@ -14,6 +14,7 @@ import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
+import java.util.List;
 
 import org.eclipse.cdt.managedbuilder.pkgconfig.Activator;
 import org.eclipse.cdt.managedbuilder.pkgconfig.preferences.PreferenceStore;
@@ -141,7 +142,7 @@ public class PkgConfigUtil {
 	 * 
 	 * @return
 	 */
-	public static ArrayList<String> getAllPackages() {
+	public static List<String> getAllPackages() {
 		ProcessBuilder pb = null;
 		String confPath = PreferenceStore.getPkgConfigPath();
 		if (OSDetector.isUnix() || OSDetector.isMac()) {
@@ -166,7 +167,7 @@ public class PkgConfigUtil {
 				String line;
 				BufferedReader input = new BufferedReader
 						(new InputStreamReader(p.getInputStream()));
-				ArrayList<String> packageList = new ArrayList<String>();
+				List<String> packageList = new ArrayList<String>();
 				do {
 					line = input.readLine();
 					if (line != null) {
-- 1.7.9.5 